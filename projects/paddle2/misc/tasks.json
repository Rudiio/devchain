"[\n    {\n        \"id\": 1,\n        \"file\": \"renderer.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Set up rendering environment\",\n        \"instructions\": \"import the `pygame` library\",\n        \"functional dependencies\": \"None\"\n    },\n    {\n        \"id\": 2,\n        \"file\": \"renderer.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the Renderer class\",\n        \"instructions\": \"Implement the `Renderer` class with the following attributes and methods: `screen`, `font`, `game_area_rect`, `Renderer(screen_size, game_area_rect, font_name, font_size)`, `draw_paddle(paddle)`, `draw_ball(ball)`, `draw_score(player_score, ai_score)`, `draw_game_over(winner)`, `clear_screen()`, `update_display()`.\",\n        \"functional dependencies\": \"None\"\n    },\n    {\n        \"id\": 3,\n        \"file\": \"paddle.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the Paddle class\",\n        \"instructions\": \"Implement the `Paddle` class with attributes and methods to handle paddle movement and collision detection: `position`, `velocity`, `size`, `Paddle(position, size)`, `move_up()`, `move_down()`, `draw(renderer)`.\",\n        \"functional dependencies\": \"Renderer.draw_paddle()\"\n    },\n    {\n        \"id\": 4,\n        \"file\": \"ball.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the Ball class\",\n        \"instructions\": \"Implement the `Ball` class with attributes and methods for ball movement and collision detection: `position`, `velocity`, `radius`, `Ball(position, radius)`, `move()`, `collide_with_paddle(paddle)`, `draw(renderer)`.\",\n        \"functional dependencies\": \"Renderer.draw_ball()\"\n    },\n    {\n        \"id\": 5,\n        \"file\": \"ai.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the AI class\",\n        \"instructions\": \"Implement the `AI` class with attributes and methods to control AI paddle movement: `paddle`, `difficulty`, `AI(paddle, difficulty)`, `update(ball)`.\",\n        \"functional dependencies\": \"Paddle.move_up(), Paddle.move_down()\"\n    },\n    {\n        \"id\": 6,\n        \"file\": \"game.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the Game class\",\n        \"instructions\": \"Implement the `Game` class with attributes and methods for managing game state: `player_score`, `ai_score`, `max_score`, `player_paddle`, `ai_paddle`, `ball`, `ai`, `Game(player_paddle, ai_paddle, ball, ai, max_score)`, `update()`, `check_score()`, `reset()`, `is_game_over()`, `get_scores()`.\",\n        \"functional dependencies\": \"Paddle, Ball, AI\"\n    },\n    {\n        \"id\": 7,\n        \"file\": \"main.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Set up game imports\",\n        \"instructions\": \"import `pygame`, `Paddle` from paddle.py, `Ball` from ball.py, `AI` from ai.py, `Game` from game.py, `Renderer` from renderer.py\",\n        \"functional dependencies\": \"Paddle, Ball, AI, Game, Renderer\"\n    },\n    {\n        \"id\": 8,\n        \"file\": \"main.py\",\n        \"technology\": \"python, pygame\",\n        \"description\": \"Implement the Main class with the game loop\",\n        \"instructions\": \"Implement the `Main` class with attributes and methods for running the game: `game`, `renderer`, `running`, `clock`, `Main()`, `main_loop()`, `handle_events(event)`.\",\n        \"functional dependencies\": \"Game.update(), Renderer.draw_score(), Renderer.draw_game_over(), Renderer.clear_screen(), Renderer.update_display()\"\n    }\n]\n"